---
// --- SERVER-SIDE SCRIPT (Runs at build time) ---

// 1. IMPORT necessary functions and components
import BlogLayout from '../layouts/BlogLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from 'astro:content';

// Page metadata
const pageTitle = "Interactive Content Library";
const pageDesc = "A complete, filterable archive of all reviewed content.";

// NOTE: The extra 'slugify' function has been removed from here to fix the build error.

// 2. FETCH posts from your 'article' collection.
const allPosts = await getCollection('article');

// 3. MAP the data into the structure our table needs
const tableData = allPosts.map(post => ({
  title: post.data.title,
  category: post.data.category,
  tags: post.data.tags || [],
  reviewDate: post.data.reviewDate,
  postedDate: post.data.postedDate,
  source: post.data.source,
  channel: post.data.channel,
  postLink: `/article/${post.slug}/`, // Constructing the correct URL for articles
  sourceLink: post.data.sourceLink
}));

// Automatically generate unique lists for the filter checkboxes
const uniqueCategories = [...new Set(tableData.map(item => item.category).filter(Boolean))];
const uniqueTags = [...new Set(tableData.flatMap(item => item.tags).filter(Boolean))];
const uniqueSources = [...new Set(tableData.map(item => item.source).filter(Boolean))];
---

<BlogLayout title={pageTitle} description={pageDesc}>
  
  <Header />

  <div class="max-w-[1100px] mx-auto px-4 py-8">
    <header class="text-center mb-8">
      <h1 class="text-4xl font-bold mb-2 text-slate-900 dark:text-slate-100">Interactive Content Library</h1>
      <p class="text-lg text-slate-600 dark:text-slate-400">A complete archive of all reviewed content.</p>
    </header>
    
    <div class="search-bar flex justify-between items-center mb-4">
      <input type="text" id="search-input" placeholder="Search content..." class="w-full max-w-xs px-4 py-2 border border-slate-300 dark:border-slate-700 rounded-lg bg-white dark:bg-slate-800 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition">
      <button id="reset-btn" class="reset-btn ml-4 px-4 py-2 bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-700 rounded-lg hover:bg-slate-200 dark:hover:bg-slate-700 transition font-medium">Reset All</button>
    </div>
    <div id="filter-bar" class="filter-bar flex justify-between items-center p-4 mb-4 bg-slate-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-xl cursor-pointer">
      <span class="font-semibold text-slate-800 dark:text-slate-200">Filters</span>
      <button class="dropdown-btn font-semibold text-indigo-600 dark:text-indigo-400">â–¼</button>
    </div>
    <div id="filters-container" class="filters-container hidden flex-wrap gap-8 p-6 mb-8 bg-slate-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-xl">
      <div class="filter-group">
        <h4 class="font-semibold mb-2 pb-1 border-b-2 border-indigo-500">Categories</h4>
        <div id="category-filters" class="flex flex-col gap-1">
          {uniqueCategories.map(category => (<label class="flex items-center gap-2 cursor-pointer hover:text-indigo-600 dark:hover:text-indigo-400"><input type="checkbox" value={category} data-group="category" class="rounded text-indigo-600 focus:ring-indigo-500"> {category}</label>))}
        </div>
      </div>
      <div class="filter-group">
        <h4 class="font-semibold mb-2 pb-1 border-b-2 border-indigo-500">Tags</h4>
        <div id="tag-filters" class="flex flex-col gap-1">
          {uniqueTags.map(tag => (<label class="flex items-center gap-2 cursor-pointer hover:text-indigo-600 dark:hover:text-indigo-400"><input type="checkbox" value={tag} data-group="tag" class="rounded text-indigo-600 focus:ring-indigo-500"> {tag}</label>))}
        </div>
      </div>
      <div class="filter-group">
        <h4 class="font-semibold mb-2 pb-1 border-b-2 border-indigo-500">Sources</h4>
        <div id="source-filters" class="flex flex-col gap-1">
          {uniqueSources.map(source => (<label class="flex items-center gap-2 cursor-pointer hover:text-indigo-600 dark:hover:text-indigo-400"><input type="checkbox" value={source} data-group="source" class="rounded text-indigo-600 focus:ring-indigo-500"> {source}</label>))}
        </div>
      </div>
    </div>
    
    <div class="table-wrapper overflow-x-auto border border-slate-200 dark:border-slate-700 rounded-xl">
      <table class="w-full text-sm text-left text-slate-600 dark:text-slate-400">
        <thead class="text-xs text-slate-700 dark:text-slate-300 uppercase bg-slate-50 dark:bg-slate-800">
          <tr>
            <th data-key="title" class="px-6 py-3 cursor-pointer">Title</th>
            <th data-key="category" class="px-6 py-3 cursor-pointer">Category</th>
            <th data-key="tags" class="px-6 py-3 cursor-pointer">Tags</th>
            <th data-key="reviewDate" class="px-6 py-3 cursor-pointer">Review Date</th>
            <th data-key="postedDate" class="px-6 py-3 cursor-pointer">Posted Date</th>
            <th data-key="source" class="px-6 py-3 cursor-pointer">Source</th>
            <th data-key="channel" class="px-6 py-3 cursor-pointer">Channel/Publication</th>
            <th class="px-6 py-3">Link</th>
          </tr>
        </thead>
        <tbody id="data-table-body">
          </tbody>
      </table>
    </div>
    
    <div class="pagination flex justify-between items-center mt-4">
      <div id="page-controls" class="page-controls flex gap-2"></div>
      <div class="page-size flex items-center gap-2 text-sm">
        <label for="page-size">Show:</label>
        <select id="page-size" class="px-2 py-1 border border-slate-300 dark:border-slate-700 rounded-md bg-white dark:bg-slate-800 focus:ring-indigo-500 focus:border-indigo-500">
          <option value="10">10</option><option value="20">20</option><option value="50">50</option><option value="100">100</option>
        </select>
      </div>
    </div>
  </div>

  <Footer />

</BlogLayout>

<style>
  .tags-cell span.tag-item {
    display: inline-block;
    transition: opacity 0.2s;
  }
  .tags-cell span.tag-item.tag-hidden {
    display: none;
  }
  .tag-more-button {
    cursor: pointer;
    font-size: 0.8rem;
    font-weight: 500;
    margin-left: 4px;
    padding: 2px 6px;
    border-radius: 99px;
    background-color: #eef2ff; /* Tailwind indigo-100 */
    color: #4338ca; /* Tailwind indigo-700 */
    white-space: nowrap;
  }
  .dark .tag-more-button {
    background-color: #3730a3; /* Tailwind dark indigo-800 */
    color: #c7d2fe; /* Tailwind dark indigo-300 */
  }
</style>

<script define:vars={{ tableData }}>
  document.addEventListener('DOMContentLoaded', () => {
    // --- SETUP ---
    const tableBody = document.getElementById('data-table-body');
    const filtersContainer = document.getElementById('filters-container');
    const dropdownBtn = document.getElementById('dropdown-btn');
    const filterBar = document.getElementById('filter-bar');
    const searchInput = document.getElementById('search-input');
    const resetBtn = document.getElementById('reset-btn');
    const pageControls = document.getElementById('page-controls');
    const pageSizeSelect = document.getElementById('page-size');

    // --- STATE VARIABLES ---
    let currentSort = { key: null, order: 'asc' };
    let currentPage = 1;
    let pageSize = parseInt(pageSizeSelect.value);

    // --- HELPER FUNCTIONS and OBJECTS ---
    const slugify = (text) => {
        if (!text) return '';
        return text.toString().toLowerCase()
            .replace(/\s+/g, '-').replace(/[^\w\-]+/g, '')
            .replace(/\-\-+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
    };

    const sourceIcons = {
        Youtube: `<svg class="inline-block w-4 h-4 mr-1.5" xmlns="http://www.w3.org/2000/svg" fill="#FF0000" viewBox="0 0 24 24"><path d="M23.5 6.2a2.98 2.98 0 0 0-2.1-2.1C19 3.5 12 3.5 12 3.5s-7 0-9.4.6a2.98 2.98 0 0 0-2.1 2.1A31.86 31.86 0 0 0 0 12a31.86 31.86 0 0 0 .5 5.8 2.98 2.98 0 0 0 2.1 2.1C5 20.5 12 20.5 12 20.5s7 0 9.4-.6a2.98 2.98 0 0 0 2.1-2.1A31.86 31.86 0 0 0 24 12a31.86 31.86 0 0 0-.5-5.8zM9.8 15.3V8.7l6.4 3.3-6.4 3.3z"></path></svg>`,
        News: `<svg class="inline-block w-4 h-4 mr-1.5" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path d="M21 6h-3V2H6v4H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM8 4h8v2H8V4zm13 16H3V8h2v10h14V8h2v12z"></path><rect x="11" y="10" width="6" height="2"/><rect x="11" y="14" width="6" height="2"/><rect x="7" y="10" width="2" height="2"/><rect x="7" y="14" width="2" height="2"/></svg>`,
        Blog: `<svg class="inline-block w-4 h-4 mr-1.5" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path d="M4 22h16v-2H4v2zm0-4h10v-2H4v2zm0-4h16v-2H4v2zm0-4h10V8H4v2zm0-8v2h16V2H4z"/></svg>`
    };

    function truncateTags() {
      const MAX_HEIGHT = 35; 
      const tagCells = document.querySelectorAll('.tags-cell');
      tagCells.forEach(cell => {
        cell.querySelectorAll('.tag-item.tag-hidden').forEach(tag => tag.classList.remove('tag-hidden'));
        const moreButton = cell.querySelector('.tag-more-button');
        if (moreButton) moreButton.remove();
        if (cell.offsetHeight > MAX_HEIGHT) {
          const tags = Array.from(cell.querySelectorAll('.tag-item'));
          let hiddenCount = 0;
          for (let i = tags.length - 1; i >= 0; i--) {
            if (cell.offsetHeight > MAX_HEIGHT) {
              tags[i].classList.add('tag-hidden');
              hiddenCount++;
            } else {
              break;
            }
          }
          if (hiddenCount > 0) {
            const moreButton = document.createElement('span');
            moreButton.className = 'tag-more-button';
            moreButton.innerText = `+${hiddenCount} more`;
            cell.appendChild(moreButton);
            moreButton.addEventListener('click', () => {
              cell.querySelectorAll('.tag-item.tag-hidden').forEach(tag => tag.classList.remove('tag-hidden'));
              moreButton.remove();
            }, { once: true });
          }
        }
      });
    }

    // --- CORE RENDERING AND LOGIC FUNCTIONS ---
    function renderTable(data) {
      tableBody.innerHTML = '';
      if (data.length === 0) {
        tableBody.innerHTML = `<tr class="bg-white dark:bg-slate-900"><td colspan="8" class="px-6 py-4 text-center">No results found</td></tr>`;
        renderPagination(0);
        return;
      }
      const startIndex = (currentPage - 1) * pageSize;
      const pageData = data.slice(startIndex, startIndex + pageSize);
      
      pageData.forEach(item => {
        const tr = document.createElement('tr');
        tr.className = "bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-800 transition";
        const icon = sourceIcons[item.source] || '';
        const tagsHtml = (item.tags || []).map(tag => 
            `<span class="tag-item"><a href="/tag/${slugify(tag)}/" class="text-indigo-600 dark:text-indigo-400 hover:underline">${tag}</a></span>`
        ).join(', ');

        tr.innerHTML = `
          <td class="px-6 py-4 font-medium text-slate-900 dark:text-white whitespace-nowrap"><a href="${item.postLink}" class="hover:underline">${item.title}</a></td>
          <td class="px-6 py-4"><a href="/category/${slugify(item.category)}/" class="text-indigo-600 dark:text-indigo-400 hover:underline">${item.category}</a></td>
          <td class="px-6 py-4 tags-cell">${tagsHtml}</td>
          <td class="px-6 py-4">${item.reviewDate || ''}</td>
          <td class="px-6 py-4">${item.postedDate || ''}</td>
          <td class="px-6 py-4 flex items-center">${icon}${item.source || ''}</td>
          <td class="px-6 py-4">${item.channel || ''}</td>
          <td class="px-6 py-4 whitespace-nowrap">
            <a href="${item.postLink}" target="_blank" class="font-medium text-indigo-600 dark:text-indigo-400 hover:underline">Post</a> |
            <a href="${item.sourceLink}" target="_blank" class="font-medium text-indigo-600 dark:text-indigo-400 hover:underline">Source</a>
          </td>
        `;
        tableBody.appendChild(tr);
      });
      renderPagination(data.length);
      truncateTags();
    }
    
    function renderPagination(totalItems) {
      pageControls.innerHTML = '';
      const totalPages = Math.ceil(totalItems / pageSize);
      if (totalPages <= 1) return;
      const createButton = (text, onClick, isDisabled = false, isActive = false) => {
        const btn = document.createElement('button');
        btn.textContent = text;
        btn.disabled = isDisabled;
        btn.onclick = onClick;
        btn.className = `px-3 py-1 text-sm border border-slate-300 dark:border-slate-700 rounded-md transition disabled:opacity-50`;
        if (isActive) {
            btn.classList.add('bg-indigo-600', 'text-white', 'border-indigo-600');
        } else {
            btn.classList.add('bg-white', 'dark:bg-slate-800', 'hover:bg-slate-100', 'dark:hover:bg-slate-700');
        }
        return btn;
      }
      pageControls.appendChild(createButton('Prev', () => { currentPage--; applyAll(); }, currentPage === 1));
      for(let i=1; i<= totalPages; i++){
        pageControls.appendChild(createButton(i, () => { currentPage = i; applyAll(); }, false, i === currentPage));
      }
      pageControls.appendChild(createButton('Next', () => { currentPage++; applyAll(); }, currentPage === totalPages));
    }
    
    function getActiveFilters() {
      const checked = [...document.querySelectorAll('input[type="checkbox"]:checked')];
      return {
        categories: checked.filter(c => c.dataset.group === "category").map(c => c.value),
        tags: checked.filter(c => c.dataset.group === "tag").map(c => c.value),
        sources: checked.filter(c => c.dataset.group === "source").map(c => c.value)
      };
    }

    function applyAll() {
      const { categories, tags, sources } = getActiveFilters();
      const query = searchInput.value.toLowerCase();
      let filtered = tableData.filter(item => {
        const matchCategory = categories.length ? categories.includes(item.category) : true;
        const matchTags = tags.length ? tags.some(tag => item.tags && item.tags.includes(tag)) : true;
        const matchSource = sources.length ? sources.includes(item.source) : true;
        const combinedText = `${item.title} ${item.category} ${item.tags ? item.tags.join(" ") : ''} ${item.source} ${item.channel}`.toLowerCase();
        const matchSearch = combinedText.includes(query);
        return matchCategory && matchTags && matchSource && matchSearch;
      });

      if (currentSort.key) {
        filtered.sort((a, b) => {
          let valA = a[currentSort.key]; let valB = b[currentSort.key];
          if (currentSort.key.toLowerCase().includes("date")) { valA = new Date(valA); valB = new Date(valB); }
          if (Array.isArray(valA)) valA = valA.join(", "); if (Array.isArray(valB)) valB = valB.join(", ");
          if (valA < valB) return currentSort.order === 'asc' ? -1 : 1;
          if (valA > valB) return currentSort.order === 'asc' ? 1 : -1;
          return 0;
        });
      }

      const totalPages = Math.ceil(filtered.length / pageSize);
      if(currentPage > totalPages) currentPage = totalPages || 1;
      renderTable(filtered);
    }

    function resetAll() {
      searchInput.value = "";
      document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
      currentSort = { key: null, order: 'asc' };
      document.querySelectorAll("thead th").forEach(t => t.classList.remove("sort-asc", "sort-desc"));
      currentPage = 1;
      applyAll();
    }
    
    // --- EVENT LISTENERS ---
    filterBar.addEventListener("click", () => {
      const isVisible = filtersContainer.style.display === 'flex';
      filtersContainer.style.display = isVisible ? 'none' : 'flex';
      dropdownBtn.textContent = isVisible ? 'â–¼' : 'â–²';
    });
    filtersContainer.addEventListener("change", () => { currentPage = 1; applyAll(); });
    searchInput.addEventListener("input", () => { currentPage = 1; applyAll(); });
    resetBtn.addEventListener("click", resetAll);
    pageSizeSelect.addEventListener("change", () => { pageSize = parseInt(pageSizeSelect.value); currentPage = 1; applyAll(); });
    document.querySelectorAll("thead th[data-key]").forEach(th => {
      th.addEventListener("click", () => {
        const key = th.dataset.key;
        if (currentSort.key === key) { currentSort.order = currentSort.order === 'asc' ? 'desc' : 'asc';} 
        else { currentSort.key = key; currentSort.order = 'asc'; }
        document.querySelectorAll("thead th").forEach(t => t.classList.remove("sort-asc", "sort-desc"));
        th.classList.add(currentSort.order === 'asc' ? "sort-asc" : "sort-desc");
        applyAll();
      });
    });
    
    // --- INITIAL RENDER ---
    applyAll();
  });
</script>